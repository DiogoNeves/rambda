const NAME = rambda
const AUTHOR = selfrefactor
const DOCSIFY = docsi init ./docs
const BUILD = cross-env NODE_ENV=build rollup -c
const LINT_JS = jest scripts/lint/lint.spec.js
const VERIFY_USED_BY = jest scripts/verify-used-by/verify-used-by.spec.js
const LINT_TS = cd scripts/lint-ts-files&&node lint-typings-tests.js
const CREATE_DOCS = jest scripts/populate-docs-data/populate-docs-data.spec.js
const CREATE_README = jest scripts/populate-readme-data/populate-readme-data.spec.js
const TOOLBELT = jest scripts/dynamic-ts-toolbelt/dynamic-ts-toolbelt.spec.js
const OUT = jest scripts/all-scripts/all-scripts.spec.js
const OUTX = WITH_RAMBDAX=ON jest scripts/all-scripts/all-scripts.spec.js

{
  name: {{NAME}}
  version: 6.3.1
  scripts: {

    // It runs all scripts needed to prepare for `Rambda` release.
    out: {{OUT}}

    // It runs all scripts needed to prepare for `Rambdax` release.
    x: {{OUTX}}

    // It creates JSON data used afterwards by the documentation site
    docs: {{CREATE_DOCS}}

    // It creates `README.md` file for both `Rambda` and `Rambdax` libraries
    readme: {{CREATE_README}}

    // Update `ts-toolbelt` dependency
    toolbelt: {{TOOLBELT}}

    // Runs a script to check if all repos listed in `Used by` section are actually using Rambda or Rambdax
    usedby: {{VERIFY_USED_BY}}

    // Lint all files including those in `scripts` folder
    lint: yarn lint:js&&yarn lint:ts
    "lint:ts": {{LINT_TS}}
    "lint:js": {{LINT_JS}}

    // Release
    docs: {{DOCSIFY}}
    build: yarn build:main&&yarn build:web
    "build:web": {{BUILD}} files/rollup.web.config.js
    "build:main": {{BUILD}} files/rollup.config.js
    
    // HJSON
    parse: node scripts/parse-package-json/parse-package-json
    
    new: node scripts/add-new-method/add-new-method.js
    test: jest source -u --bail=false
    
    "cover:spec": jest source --coverage --no-cache -w 1
    cover: yarn typings&&yarn cover:spec
    benchmark: jest scripts/run-benchmarks/run-benchmarks.spec.js

    // Complex benchmarks - still WIP
    benchmarkx: jest scripts/run-benchmarks/run-complex-benchmarks.spec.js
    
    typings: dtslint --localTs ./node_modules/typescript/lib --expectOnly ./source
    
    // Needed because of CI build error
    fix: mkdir $HOME/.dts/perf -p
  }

  devDependencies: {
    @babel/core: 7.12.3
    @babel/plugin-proposal-object-rest-spread: 7.12.1
    @babel/preset-env: 7.12.1
    @rollup/plugin-babel: 5.2.1
    @rollup/plugin-commonjs: 16.0.0
    @rollup/plugin-json: 4.1.0
    @rollup/plugin-node-resolve: 10.0.0
    @rollup/plugin-replace: 2.3.4
    @types/fs-extra: 9.0.4
    @types/jest: 26.0.15
    @types/ramda: 0.27.32
    combinate: 1.1.1
    cross-env: 7.0.2
    dtslint: 4.0.5
    fs-extra: 9.0.1
    got: 11.8.0
    helpers-fn: 1.0.0
    is-ci: 2.0.0
    jest: 26.6.3
    jest-extended: 0.11.5
    lint-fn: 2.12.1
    lodash: 4.17.20
    rambdax: 7.0.1
    ramda: 0.27.1
    rollup: 2.33.1
    rollup-plugin-cleanup: 3.2.1
    rollup-plugin-sourcemaps: 0.6.3
    string-fn: 3.1.0
    typescript: 4.2.0-dev.20201113
  }

  jest: {
    testEnvironment: node

    // Quotes are required as HJSON has its limits
    testRegex: ".*\\.spec\\.js$"
    setupFilesAfterEnv: [
      jest-extended
    ],
    collectCoverageFrom: [
      source/*.js
      !_internals
      !benchmarks
    ]
  }


  // Which files/folders are exposed as npm package
  files: [
    dist
    src
    _ts-toolbelt
    index.d.ts
  ]

  repository: {
    type: git
    url: git+https://github.com/{{AUTHOR}}/{{NAME}}.git
  }
  
  license: MIT
  author: self_refactor
  description: Lightweight and faster alternative to Ramda
  module: ./dist/rambda.esm.js
  main: ./dist/rambda
  umd: ./dist/rambda.umd.js
  sideEffects: false

  keywords: [
    ramda
    fp
    functional
    utility
    lodash
  ]

  bugs: {
    url: https://github.com/{{AUTHOR}}/{{NAME}}/issues
  }

  homepage: https://github.com/{{AUTHOR}}/{{NAME}}#readme
}
