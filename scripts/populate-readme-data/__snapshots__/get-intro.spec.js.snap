// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`happy 1`] = `
"
# Rambda

\`Rambda\` is smaller and faster alternative to the popular functional programming library **Ramda**. - [Documentation](https://selfrefactor.github.io/rambda/#/)

[![CircleCI](https://circleci.com/gh/selfrefactor/rambda/tree/master.svg?style=svg)](https://circleci.com/gh/selfrefactor/rambda/tree/master)
[![codecov](https://codecov.io/gh/selfrefactor/rambda/branch/master/graph/badge.svg)](https://codecov.io/gh/selfrefactor/rambda)
[![dependencies Status](https://david-dm.org/selfrefactor/rambda/status.svg)](https://david-dm.org/selfrefactor/rambda)
![Commit activity](https://img.shields.io/github/commit-activity/y/selfrefactor/rambda)
![All contributors](https://img.shields.io/github/contributors/selfrefactor/rambda)
![Library size](https://img.shields.io/bundlephobia/minzip/rambda)

## ➤ Example use

\`\`\`javascript
import { compose, map, filter } from 'rambda'

const result = compose(
  map(x => x * 2),
  filter(x => x > 2)
)([1, 2, 3, 4])
// => [6, 8]
\`\`\`

You can test this example in <a href=\\"https://rambda.now.sh?const%20result%20%3D%20R.compose(%0A%20%20R.map(x%20%3D%3E%20x%20*%202)%2C%0A%20%20R.filter(x%20%3D%3E%20x%20%3E%202)%0A)(%5B1%2C%202%2C%203%2C%204%5D)%0A%0A%2F%2F%20%3D%3E%20%5B6%2C%208%5D\\">Rambda's REPL</a>

* [Install](#install)
* [Differences between Rambda and Ramda](#differences-between-rambda-and-ramda)
* [API](#api)
* [Changelog](#changelog)

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-example-use)

## ➤ Rambda's advantages

### Typescript included

Typescript definitions are included in the library, in comparison to **Ramda**, where you need to additionally install \`@types/ramda\`.

Still, you need to be aware that functional programming features in \`Typescript\` are in development, which means that using **R.compose/R.pipe** can be problematic.

### Smaller size

The size of a library affects not only the build bundle size but also the dev bundle size and build time. This is important advantage, expecially for big projects.

### Tree-shaking

Currently **Rambda** is more tree-shakable than **Ramda** - proven in the following [repo](https://github.com/selfrefactor/rambda-tree-shaking).

The repo holds two \`Angular9\` applications: one with small example code of *Ramda* and the other - same code but with *Rambda* as import library.

The test shows that **Rambda** bundle size is **2.03 MB** less than its **Ramda** counterpart.

There is also [Webpack/Rollup/Parcel/Esbuild tree-shaking example including several libraries](https://github.com/mischnic/tree-shaking-example) including \`Ramda\`, \`Rambda\` and \`Rambdax\`. 

> actually tree-shaking is the initial reason for creation of \`Rambda\`

### Dot notation for \`R.path\`, \`R.paths\`, \`R.assocPath\` and \`R.lensPath\`

Standard usage of \`R.path\` is \`R.path(['a', 'b'], {a: {b: 1} })\`.

In **Rambda** you have the choice to use dot notation(which is arguably more readable):

\`\`\`
R.path('a.b', {a: {b: 1} })
\`\`\`

### Comma notation for \`R.pick\` and \`R.omit\`

Similar to dot notation, but the separator is comma(\`,\`) instead of dot(\`.\`).

\`\`\`
R.pick('a,b', {a: 1 , b: 2, c: 3} })
// No space allowed between properties
\`\`\`

### Speed

**Rambda** is generally more performant than \`Ramda\` as the [benchmarks](#benchmarks) can prove that.

### Support

Most of the valid issues are fixed within 2-3 days.

Closing the issue is usually accompanied by publishing a new patch version of \`Rambda\` to NPM.


[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-rambdas-advantages)

## ➤ Missing Ramda methods

<details>
<summary>
  Click to see the full list of 90 Ramda methods not implemented in Rambda 
</summary>

- __
- addIndex
- ap
- aperture
- apply
- applyTo
- ascend
- binary
- bind
- call
- comparator
- composeK
- composeP
- composeWith
- construct
- constructN
- contains
- countBy
- descend
- differenceWith
- dissocPath
- empty
- eqBy
- forEachObjIndexed
- gt
- gte
- hasIn
- innerJoin
- insert
- insertAll
- into
- invert
- invertObj
- invoker
- juxt
- keysIn
- lift
- liftN
- lt
- lte
- mapAccum
- mapAccumRight
- mapObjIndexed
- memoizeWith
- mergeDeepLeft
- mergeDeepWith
- mergeDeepWithKey
- mergeRight
- mergeWith
- mergeWithKey
- nAry
- nthArg
- o
- objOf
- otherwise
- pair
- partialRight
- pathSatisfies
- pickBy
- pipeK
- pipeP
- pipeWith
- project
- propSatisfies
- reduceBy
- reduceRight
- reduceWhile
- reduced
- remove
- scan
- sequence
- sortWith
- symmetricDifferenceWith
- andThen
- toPairsIn
- transduce
- traverse
- unapply
- unary
- uncurryN
- unfold
- unionWith
- uniqBy
- unnest
- until
- useWith
- valuesIn
- xprod
- thunkify
- default

</details>

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-missing-ramda-methods)
  
## ➤ Install

- **yarn add rambda**

- For UMD usage either use \`./dist/rambda.umd.js\` or the following CDN link:

\`\`\`
https://unpkg.com/rambda@CURRENT_VERSION/dist/rambda.umd.js
\`\`\`

- with deno

\`\`\`
import {compose, add} from 'https://raw.githubusercontent.com/selfrefactor/rambda/master/dist/rambda.esm.js'
\`\`\`

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-install)

## Differences between Rambda and Ramda

- Rambda's **type** detects async functions and unresolved \`Promises\`. The returned values are \`'Async'\` and \`'Promise'\`.

- Rambda's **type** handles *NaN* input, in which case it returns \`NaN\`.

- Rambda's **forEach** can iterate over objects not only arrays.

- Rambda's **map**, **filter**, **partition** when they iterate over objects, they pass property and input object as predicate's argument.

- Rambda's **filter** returns empty array with bad input(\`null\` or \`undefined\`), while Ramda throws.

- Ramda's **clamp** work with strings, while Rambda's method work only with numbers.

- Error handling, when wrong inputs are provided, may not be the same. This difference will be better documented once all brute force tests are completed.

- Typescript definitions between \`rambda\` and \`@types/ramda\` may vary.

> If you need more **Ramda** methods in **Rambda**, you may either submit a \`PR\` or check the extended version of **Rambda** - [Rambdax](https://github.com/selfrefactor/rambdax). In case of the former, you may want to consult with [Rambda contribution guidelines.](CONTRIBUTING.md)

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-differences-between-rambda-and-ramda)

## ➤ Benchmarks

<details>

<summary>
Click to expand all benchmark results

There are methods which are benchmarked only with \`Ramda\` and \`Rambda\`(i.e. no \`Lodash\`).

Note that some of these methods, are called with and without curring. This is done in order to give more detailed performance feedback.

The benchmarks results are produced from latest versions of *Rambda*, *Lodash*(4.17.20) and *Ramda*(0.27.1).

</summary>

method | Rambda | Ramda | Lodash
--- |--- | --- | ---
 *add* | 96.25% slower | 96.24% slower | 🚀 Fastest
 *adjust* | 🚀 Fastest | 5.52% slower | 🔳
 *all* | 🚀 Fastest | 94.95% slower | 🔳
 *allPass* | 🚀 Fastest | 98.95% slower | 🔳
 *any* | 🚀 Fastest | 98.18% slower | 6.18% slower
 *anyPass* | 🚀 Fastest | 99.09% slower | 🔳
 *append* | 🚀 Fastest | 84.09% slower | 🔳
 *applySpec* | 🚀 Fastest | 75.73% slower | 🔳
 *assoc* | 87.98% slower | 57.39% slower | 🚀 Fastest
 *clone* | 🚀 Fastest | 96.03% slower | 91.75% slower
 *compose* | 🚀 Fastest | 96.45% slower | 77.83% slower
 *converge* | 49.12% slower | 🚀 Fastest | 🔳
 *curry* | 🚀 Fastest | 34.9% slower | 🔳
 *curryN* | 63.32% slower | 🚀 Fastest | 🔳
 *defaultTo* | 🚀 Fastest | 50.3% slower | 🔳
 *drop* | 🚀 Fastest | 97.45% slower | 🔳
 *dropLast* | 🚀 Fastest | 97.07% slower | 🔳
 *equals* | 72.11% slower | 79.48% slower | 🚀 Fastest
 *filter* | 🚀 Fastest | 94.74% slower | 58.18% slower
 *find* | 🚀 Fastest | 98.2% slower | 88.96% slower
 *findIndex* | 🚀 Fastest | 97.97% slower | 79.39% slower
 *flatten* | 6.56% slower | 95.38% slower | 🚀 Fastest
 *ifElse* | 🚀 Fastest | 70.97% slower | 🔳
 *includes* | 🚀 Fastest | 71.7% slower | 🔳
 *indexOf* | 🚀 Fastest | 84.08% slower | 7.86% slower
 *init* | 94.42% slower | 97.55% slower | 🚀 Fastest
 *is* | 🚀 Fastest | 11.72% slower | 🔳
 *isEmpty* | 51.68% slower | 93.82% slower | 🚀 Fastest
 *last* | 🚀 Fastest | 99.64% slower | 1.05% slower
 *lastIndexOf* | 🚀 Fastest | 42.38% slower | 🔳
 *map* | 🚀 Fastest | 69.63% slower | 4.68% slower
 *match* | 🚀 Fastest | 46.75% slower | 🔳
 *merge* | 63.55% slower | 🚀 Fastest | 55.25% slower
 *none* | 🚀 Fastest | 98.22% slower | 🔳
 *omit* | 🚀 Fastest | 70.66% slower | 97.56% slower
 *over* | 🚀 Fastest | 50.77% slower | 🔳
 *path* | 🚀 Fastest | 74.94% slower | 5.72% slower
 *pick* | 🚀 Fastest | 26.29% slower | 86.82% slower
 *prop* | 🚀 Fastest | 89.89% slower | 🔳
 *propEq* | 🚀 Fastest | 95.26% slower | 🔳
 *range* | 95.17% slower | 90.22% slower | 🚀 Fastest
 *reduce* | 52.76% slower | 74.02% slower | 🚀 Fastest
 *repeat* | 85.91% slower | 95.31% slower | 🚀 Fastest
 *replace* | 0.47% slower | 28.13% slower | 🚀 Fastest
 *set* | 🚀 Fastest | 36.26% slower | 🔳
 *sort* | 🚀 Fastest | 63.15% slower | 🔳
 *sortBy* | 🚀 Fastest | 61.57% slower | 88.88% slower
 *split* | 🚀 Fastest | 85.34% slower | 33.69% slower
 *splitEvery* | 🚀 Fastest | 90.18% slower | 🔳
 *take* | 93.44% slower | 98.04% slower | 🚀 Fastest
 *takeLast* | 92.61% slower | 98.83% slower | 🚀 Fastest
 *test* | 🚀 Fastest | 94.42% slower | 🔳
 *type* | 18.91% slower | 🚀 Fastest | 🔳
 *uniq* | 98.98% slower | 96.58% slower | 🚀 Fastest
 *update* | 🚀 Fastest | 38.88% slower | 🔳
 *view* | 🚀 Fastest | 82.21% slower | 🔳

</details>

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-benchmarks)

## ➤ Used by

- [WatermelonDB](https://github.com/Nozbe/WatermelonDB)

- [Walmart Canada](https://www.walmart.ca) reported by [w-b-dev](https://github.com/w-b-dev) 

- [VSCode Slack intergration](https://github.com/verydanny/vcslack)

- [Webpack PostCSS](https://github.com/sectsect/webpack-postcss)

- [MobX-State-Tree decorators](https://github.com/farwayer/mst-decorators)

- [Rewrite of the Betaflight configurator](https://github.com/freshollie/fresh-configurator)

- [MineFlayer plugin](https://github.com/G07cha/MineflayerArmorManager)

[![---------------](https://raw.githubusercontent.com/selfrefactor/rambda/master/files/separator.png)](#-used-by)
"
`;
